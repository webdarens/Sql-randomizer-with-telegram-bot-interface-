import random
import sqlite3
import telebot
from telebot import types

TOKEN = 'your token'
bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫!", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–°–¥–µ–ª–∞–π –∏–¥–µ—é')
        markup.add(btn1)
        bot.send_message(message.from_user.id, '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ –ø–æ–ª—è –Ω–∏–∂–µ', reply_markup=markup)
    elif message.text == '–°–¥–µ–ª–∞–π –∏–¥–µ—é':
        msg = bot.send_message(message.chat.id,
                               f"–°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–¥–µ–π?-->–ß—Ç–æ –≤–æ–∑—å–º—ë–º –∑–∞ –∏–¥–µ—é?(–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)\n‚ùó–ï—Å–ª–∏ –∏–¥–µ—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤, –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ‚ùó\n –ü—Ä–∏–º–µ—Ä: 10 –∏—Ç–æ–≥–æ–≤—ã–π-–ø—Ä–æ–µ–∫—Ç")
        bot.register_next_step_handler(msg, gen)
    elif message.text == '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è':
        msg = bot.send_message(message.chat.id,
                               f"–°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–¥–µ–π?-->–ß—Ç–æ –≤–æ–∑—å–º—ë–º –∑–∞ –∏–¥–µ—é?")
        bot.register_next_step_handler(msg, gen)
    elif message.text == '–ú–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–°–¥–µ–ª–∞–π –∏–¥–µ—é')
        markup.add(btn1)
        bot.send_message(message.from_user.id, '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ –ø–æ–ª—è –Ω–∏–∂–µ', reply_markup=markup)
    else:
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–ø–∏—à–∏ /start')
def afterGen(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è')
    btn2 = types.KeyboardButton('–ú–µ–Ω—é')
    markup.add(btn2)
    markup.add(btn1)
    bot.send_message(message.from_user.id, '–°–¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é‚ùì', reply_markup=markup)

def gen(message):
    n, forinput = message.text.split()
    nInteger = int(n)
    conn = sqlite3.connect('bebra.db')
    cursor = conn.cursor()
    try:
        for i in range(nInteger):
            n1 = random.randint(0, 1008)
            n2 = random.randint(0, 1009)
            n3 = random.randint(0, 1009)
            bebra1 = cursor.execute(f"SELECT essential FROM generator WHERE rowid = ?", (n1,)).fetchone()
            bebra2 = cursor.execute(f"SELECT adjective FROM generator WHERE rowid = ?", (n2,)).fetchone()
            bebra3 = cursor.execute(f"SELECT verb FROM generator WHERE rowid = ?", (n3,)).fetchone()

            # Error handling for bebra1
            if bebra1:
                bebra1_value = bebra1[0]
            else:
                bebra1_value = "No essential found[ERROR]"

            # Error handling for bebra2
            if bebra2:
                bebra2_value = bebra2[0]
            else:
                bebra2_value = "No adjective found[ERROR]"

            # Error handling for bebra3
            if bebra3:
                bebra3_value = bebra3[0]
            else:
                bebra3_value = "No verb found[ERROR]"

            bot.send_message(message.chat.id, f'{forinput}‚ûù {bebra3_value}, {bebra2_value}, {bebra1_value}')
    finally:
        cursor.close()
        conn.close()
        afterGen(message)

bot.polling(none_stop=True)


